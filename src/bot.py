import sys
import telebot
import urllib
from telebot import types
from ATMFinder import ATMFinder

bot = telebot.TeleBot(sys.argv[1])

API_KEY = sys.argv[2]
STATICMAP_URL = "https://maps.googleapis.com/maps/api/staticmap?center={},{}&zoom=15&size=400x300&markers=color:red|{},{}"
MAX_DST = 500
CANCEL = "Cancel"
USER_ACTIONS = {}
MAX_OPS = 1000

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
	bot.reply_to(message,"Hello! To search for ATMs you can try typing '/link' or '/banelco'.")

def atmNetworkCmd(msg):
	"""Receives a string 'msg'.
	Return True if 'msg' is valid atm network request command.
	"""
	return msg.content_type=='text' and len(msg.text)>0 and (ATMFinder.isNetwork(msg.text[1:]))

@bot.message_handler(func=atmNetworkCmd)
def send_link_atms(message):
	"""Handles atm network commands.
	Requests user to share their location.
	"""
	keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
	button_geo_yes = types.KeyboardButton(text="Share my location!",request_location=True)
	button_geo_no = types.KeyboardButton(text=CANCEL,request_location=False)
	USER_ACTIONS[message.chat.id] = message.text[1:].upper()
	keyboard.add(button_geo_yes,button_geo_no)
	bot.send_message(message.chat.id, "Hey there! Want to see some "+message.text[1:].upper()+" ATMs?", reply_markup=keyboard)

@bot.message_handler(content_types=['location'])
def handle_location(message):
	"""Receives location shared by user.
	Sends closest atm locations and Static Map generated by Google Maps.
	"""
	hideKb = types.ReplyKeyboardRemove()
	userLat = message.location.latitude
	userLng = message.location.longitude
	#Initialize google maps url.
	mapUrl = STATICMAP_URL.format(userLat,userLng,userLat,userLng)

	if not message.chat.id in USER_ACTIONS:
		bot.send_message(message.chat.id, "Please enter a command. Try '/help' for more information.",reply_markup=hideKb)
		return True

	#Get latest atm command issued by this user to identify network.
	#Then find closest ATMs from that network.
	qnetwork = USER_ACTIONS[message.chat.id]
	atms = ATMFinder(MAX_DST).knn([userLat,userLng],MAX_OPS,qnetwork)

	if len(atms)>0:
		mapUrl+= "&markers=color:blue|label:{}".format(qnetwork[0])
		for atm in atms:
			lat = atm.getLoc().latitude()
			long = atm.getLoc().longitude()
			#Get atm location and data and send it:
			bot.send_venue(message.chat.id,lat,long,atm.getBank(),atm.getAddress(),reply_markup=hideKb)
			mapUrl+= "|{},{}".format(lat,long)
		mapUrl+= "&key={}".format(API_KEY)

		#Send static google map:
		bot.send_photo(message.chat.id,urllib.urlopen(mapUrl))
	else:
		bot.send_message(message.chat.id, "Sorry! We found no "+str(USER_ACTIONS[message.chat.id])+" ATMs in your area!",reply_markup=hideKb)

@bot.message_handler(func=lambda message:message.text==CANCEL)
def handle_cancel(message):
	"""Handle request to Cancel location sharing.
	"""
	hideKb = types.ReplyKeyboardRemove()
	bot.send_message(message.chat.id, "OK!", reply_markup=hideKb)

@bot.message_handler(content_types=['text'])
def handle_location(message):
	"""Handle all unknown commands issued by the user.
	"""
	bot.send_message(message.chat.id, "Please enter a valid command. Try '/help' for more information.")

bot.polling(none_stop=True, interval=0)
